

import boto3


def cloud_watch_splunk_enforcement(event, context):
    CWLogs = boto3.client('logs')

    ignore_list = []  # A list of log groups to ignore

    role = get_role()

    if event['detail-type'] == "AWS API Call via CloudTrail":
        group = event['detail']['requestParameters']['logGroupName']
        stream = get_kinesis_stream(group)
        expected_filter = {'filterName': 'SplunkSubscription',
                           'filterPattern': "", 'destinationArn': stream, 'roleArn': role}
        try:
            subs = CWLogs.describe_subscription_filters(logGroupName=group)
        except Exception as e:
            print(e)
            print("ERROR: Failed to get subscription filters for log group: " + group)

        if len(subs['subscriptionFilters']) == 0:
            try:

                CWLogs.put_subscription_filter(logGroupName=group, filterName=expected_filter['filterName'], filterPattern=expected_filter[
                                               'filterPattern'], destinationArn=expected_filter['destinationArn'], roleArn=expected_filter['roleArn'])
                print("Updated subscription filters for group: " + group)
            except Exception as e:
                print(e)
                print("ERROR: Failed to update the subscription for group: " + group)

        else:
            filter_correct = False
            for sub in subs['subscriptionFilters']:
                if matching_filter(sub, expected_filter) == True:
                    filter_correct = True
                else:
                    try:
                        CWLogs.delete_subscription_filter(
                            logGroupName=group, filterName=sub['filterName'])
                        print("Deleted subscription filter: " +
                              sub + " from group: " + group)
                    except Exception as e:
                        print(e)
                        print("ERROR: Failed to delete a subscription: " +
                              sub['filterName'] + " from group: " + group)

                if filter_correct == False:
                    try:
                        CWLogs.put_subscription_filter(logGroupName=group, filterName=expected_filter['filterName'], filterPattern=expected_filter[
                                                       'filterPattern'], destinationArn=expected_filter['destinationArn'], roleArn=expected_filter['roleArn'])
                        print("Updated subscription filters for group: " + group)
                    except Exception as e:
                        print(e)
                        print(
                            "ERROR: Failed to update the subscription for group: " + group)

    else:
        # list all the log groups that need to be logged to splunk
        group_list = []

        done = False
        try:
            groups = CWLogs.describe_log_groups(limit=50)
        except Exception as e:
            print(e)
            raise Exception("Failed to list Log Groups")

        while(done == False):
            for g in groups['logGroups']:
                if g['logGroupName'] not in ignore_list:
                    group_list.append(g['logGroupName'])
                else:
                    print("Ignoring Log Group: " + g['logGroupName'])

            if 'nextToken' not in groups:
                done = True
            else:
                try:
                    groups = CWLogs.describe_log_groups(
                        limit=50, nextToken=groups['nextToken'])
                except Exception as e:
                    print(e)
                    raise Exception("Failed to list Log Groups")

        # check that they all have the correct kinesis stream subscribed to them (1 stream per region)
        for group in group_list:
            stream = get_kinesis_stream(group)
            expected_filter = {'filterName': 'SplunkSubscription',
                           'filterPattern': "", 'destinationArn': stream, 'roleArn': role}
            try:
                subs = CWLogs.describe_subscription_filters(logGroupName=group)
            except Exception as e:
                print(e)
                print(
                    "ERROR: Failed to get subscription filters for log group: " + group)
                break

            if len(subs['subscriptionFilters']) == 0:
                try:
                    CWLogs.put_subscription_filter(logGroupName=group, filterName=expected_filter['filterName'], filterPattern=expected_filter[
                                                   'filterPattern'], destinationArn=expected_filter['destinationArn'], roleArn=expected_filter['roleArn'])
                    print("Updated subscription filters for group: " + group)
                except Exception as e:
                    print(e)
                    print(
                        "ERROR: Failed to update the subscription for group: " + group)

            else:
                filter_correct = False
                for sub in subs['subscriptionFilters']:
                    if matching_filter(sub, expected_filter) == True:
                        filter_correct = True
                    else:
                        try:
                            CWLogs.delete_subscription_filter(
                                logGroupName=group, filterName=sub['filterName'])
                            print("Deleted subscription filter: " +
                                  sub + " from group: " + group)
                        except Exception as e:
                            print(e)
                            print("ERROR: Failed to delete a subscription: " +
                                  sub['filterName'] + " from group: " + group)

                    if filter_correct == False:
                        try:
                            CWLogs.put_subscription_filter(logGroupName=group, filterName=expected_filter['filterName'], filterPattern=expected_filter[
                                                           'filterPattern'], destinationArn=expected_filter['destinationArn'], roleArn=expected_filter['roleArn'])
                            print("Updated subscription filters for group: " + group)
                        except Exception as e:
                            print(e)
                            print(
                                "ERROR: Failed to update the subscription for group: " + group)


def matching_filter(filter_1, filter_2):
    match = True

    if filter_1['filterName'] != filter_2['filterName']:
        match = False

    if filter_1['filterPattern'] != filter_2['filterPattern']:
        match = False

    if filter_1['destinationArn'] != filter_2['destinationArn']:
        match = False

    if filter_1['roleArn'] != filter_2['roleArn']:
        match = False

    return match


def get_kinesis_stream(group):
    kin = boto3.client('kinesis')

    # this will need to be updated as more accounts are added
    acc_sdlc = {'XXXXXXXXXXXXX': 'YYY',
                }

    try:
        account_num = boto3.client('sts').get_caller_identity().get('Account')
    except Exception as e:
        print(e)
        raise Exception('Failed to get account number')

    try:
        region = boto3.session.Session().region_name
        if region == "":
            region = 'us-east-1'
    except Exception as e:
        print(e)
        raise Exception('Failed to get current region')

    stream_name = acc_sdlc[account_num] + "-" + region + "-SplunkStream"
    stream_name2 = acc_sdlc[account_num] + "-" + region + "-SplunkStream-VPC"

    try:
        stream_arn = kin.describe_stream(StreamName=stream_name)[
            'StreamDescription']['StreamARN']
        stream_arn2 = kin.describe_stream(StreamName=stream_name2)[
            'StreamDescription']['StreamARN']
        if("vpc_log_group" in group):
            stream = stream_arn2
        else:
            stream = stream_arn
    except Exception as e:
        print(e)
        raise Exception("Failed to get stream ARN")

    return stream


def get_role():
    iam = boto3.client('iam')

    try:
        role_arn = iam.get_role(RoleName='CloudWatchToKinesisRole')[
            'Role']['Arn']
    except Exception as e:
        print(e)
        raise Exception("Failed to get role ARN")

    return role_arn
